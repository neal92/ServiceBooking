const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// Test du syst√®me de notifications
async function testNotifications() {
  try {
    console.log('üîî === TEST DU SYST√àME DE NOTIFICATIONS ===\n');
    
    // 1. Connexion (pour avoir un token)
    console.log('1. Connexion...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@example.com', // Essayons avec cet email
      password: 'admin123'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ Connexion r√©ussie');
    
    const headers = { Authorization: `Bearer ${token}` };
    
    // 2. Cr√©er un service pour g√©n√©rer des notifications
    console.log('\n2. Cr√©ation d\'un service...');
    const serviceResponse = await axios.post(`${BASE_URL}/services`, {
      name: 'Service Test Notification',
      description: 'Service de test pour les notifications',
      price: 50,
      duration: 60,
      categoryId: 1
    }, { headers });
    
    console.log('‚úÖ Service cr√©√©:', serviceResponse.data.message);
    const serviceId = serviceResponse.data.serviceId;
    
    // 3. Attendre un peu pour que les notifications se cr√©ent
    console.log('\n3. Attente des notifications...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 4. R√©cup√©rer les notifications
    console.log('\n4. R√©cup√©ration des notifications...');
    const notificationsResponse = await axios.get(`${BASE_URL}/notifications`, { headers });
    
    console.log('‚úÖ Notifications r√©cup√©r√©es:');
    console.log(`   - Total: ${notificationsResponse.data.notifications.length}`);
    console.log(`   - Non lues: ${notificationsResponse.data.unreadCount}`);
    
    if (notificationsResponse.data.notifications.length > 0) {
      const lastNotification = notificationsResponse.data.notifications[0];
      console.log('   - Derni√®re notification:');
      console.log(`     Type: ${lastNotification.type}`);
      console.log(`     Titre: ${lastNotification.title}`);
      console.log(`     Message: ${lastNotification.message}`);
    }
    
    // 5. Mettre √† jour le service
    console.log('\n5. Mise √† jour du service...');
    await axios.put(`${BASE_URL}/services/${serviceId}`, {
      name: 'Service Test Notification MODIFI√â',
      description: 'Service de test modifi√©',
      price: 75,
      duration: 90,
      categoryId: 1
    }, { headers });
    
    console.log('‚úÖ Service modifi√©');
    
    // 6. Supprimer le service
    console.log('\n6. Suppression du service...');
    await axios.delete(`${BASE_URL}/services/${serviceId}`, { headers });
    
    console.log('‚úÖ Service supprim√©');
    
    // 7. V√©rifier les nouvelles notifications
    console.log('\n7. V√©rification des nouvelles notifications...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const finalNotifications = await axios.get(`${BASE_URL}/notifications`, { headers });
    console.log('‚úÖ Notifications finales:');
    console.log(`   - Total: ${finalNotifications.data.notifications.length}`);
    console.log(`   - Non lues: ${finalNotifications.data.unreadCount}`);
    
    console.log('\nüéâ === TEST TERMIN√â AVEC SUCC√àS ===');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
  }
}

// Lancer le test
testNotifications();
