// Script pour améliorer l'apparence et l'interaction avec le calendrier
// Ce script doit être injecté après le chargement du calendrier
import { optimizeCalendarSpace } from './optimizeCalendarSpace';

export const enhanceCalendar = () => {
  // Attendre que le calendrier soit complètement chargé
  setTimeout(() => {
    // Optimiser l'utilisation de l'espace
    optimizeCalendarSpace();
    
    // Améliorer les événements du calendrier
    enhanceCalendarEvents();
    
    // Améliorer l'affichage sur mobile
    enhanceMobileView();
    
    // Ajouter des effets visuels supplémentaires
    enhanceVisualEffects();
    
    // Observer les changements futurs dans le calendrier
    observeCalendarChanges();
  }, 300);
};

// Cette fonction n'est plus utilisée car elle a été déplacée dans optimizeCalendarSpace.ts
// et est importée ci-dessus
/* Ancienne fonction locale - début du commentaire
function optimizeCalendarSpace_old() {
  // Sélectionner les éléments clés du calendrier pour optimiser l'espace
  const fcElement = document.querySelector('.fc');
  const viewHarness = document.querySelector('.fc-view-harness');
  const scrollGrid = document.querySelector('.fc-scrollgrid');
  const calendarContainer = document.querySelector('.calendar-container');
  
  if (fcElement instanceof HTMLElement) {
    fcElement.style.height = '100%';
    fcElement.style.display = 'flex';
    fcElement.style.flexDirection = 'column';
    fcElement.style.width = '100%';
    
    // Réduire la taille des contrôles de l'en-tête
    const toolbar = fcElement.querySelector('.fc-toolbar');
    if (toolbar instanceof HTMLElement) {
      toolbar.style.padding = '4px';
      toolbar.style.marginBottom = '4px';
    }
    
    // Donner plus d'espace au titre du calendrier
    const title = fcElement.querySelector('.fc-toolbar-title');
    if (title instanceof HTMLElement) {
      title.style.fontSize = '1.1rem';
      title.style.fontWeight = '600';
      title.style.padding = '4px 8px';
      title.style.borderRadius = '6px';
      title.style.backdropFilter = 'blur(3px)';
      
      // Effet de glassmorphism pour le titre
      if (document.documentElement.classList.contains('dark')) {
        title.style.background = 'rgba(30, 58, 138, 0.3)';
        title.style.boxShadow = '0 2px 6px rgba(0, 0, 0, 0.2)';
      } else {
        title.style.background = 'rgba(239, 246, 255, 0.6)';
        title.style.boxShadow = '0 2px 6px rgba(0, 0, 0, 0.05)';
      }
      
      // Effet de survol
      title.addEventListener('mouseenter', () => {
        title.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';
        title.style.transform = 'translateY(-1px)';
        
        if (document.documentElement.classList.contains('dark')) {
          title.style.background = 'rgba(30, 58, 138, 0.4)';
        } else {
          title.style.background = 'rgba(239, 246, 255, 0.8)';
        }
      });
      
      title.addEventListener('mouseleave', () => {
        title.style.boxShadow = '0 2px 6px rgba(0, 0, 0, 0.05)';
        title.style.transform = 'translateY(0)';
        
        if (document.documentElement.classList.contains('dark')) {
          title.style.background = 'rgba(30, 58, 138, 0.3)';
        } else {
          title.style.background = 'rgba(239, 246, 255, 0.6)';
        }
      });
    }
  }
  
  if (viewHarness instanceof HTMLElement) {
    viewHarness.style.flex = '1';
    viewHarness.style.minHeight = '0';
    viewHarness.style.height = 'auto';
    viewHarness.style.maxHeight = 'none';
  }
  
  if (scrollGrid instanceof HTMLElement) {
    scrollGrid.style.height = '100%';
  }
  
  if (calendarContainer instanceof HTMLElement) {
    calendarContainer.style.height = '100%';
    calendarContainer.style.display = 'flex';
    calendarContainer.style.flexDirection = 'column';
  }
  
  // Ajuster les scroller pour qu'ils prennent toute la hauteur disponible
  const scrollers = document.querySelectorAll('.fc-scroller');
  scrollers.forEach(scroller => {
    if (scroller instanceof HTMLElement) {
      scroller.style.height = '100% !important';
      scroller.style.maxHeight = 'none';
    }
  });
  
  // Ajuster les cellules de temps pour qu'elles soient plus compactes si nécessaire
  const timeGridSlots = document.querySelectorAll('.fc-timegrid-slot');
  if (window.innerHeight < 800) {
    timeGridSlots.forEach(slot => {
      if (slot instanceof HTMLElement) {
        slot.style.height = '2.8rem';
      }
    });
  } else if (window.innerHeight < 900) {
    timeGridSlots.forEach(slot => {
      if (slot instanceof HTMLElement) {
        slot.style.height = '3.2rem';
      }
    });
  }
}

// Fonction pour ajouter des effets visuels supplémentaires au calendrier
function enhanceVisualEffects() {
  // Améliorer l'apparence de l'en-tête des jours
  const dayHeaders = document.querySelectorAll('.fc-col-header-cell');
  dayHeaders.forEach(header => {
    if (header instanceof HTMLElement) {
      header.style.fontWeight = '600';
      
      // Vérifier si c'est aujourd'hui
      if (header.classList.contains('fc-day-today')) {
        header.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
        
        // Ajouter une pulsation subtile
        header.style.animation = 'pulse-subtle 2s infinite';
      }
    }
  });
    // Améliorer l'apparence des boutons de navigation
  const navButtons = document.querySelectorAll('.fc-prev-button, .fc-next-button');
  navButtons.forEach(button => {
    if (button instanceof HTMLElement) {
      button.style.borderRadius = '50%';
      button.style.width = '32px';
      button.style.height = '32px';
      button.style.display = 'flex';
      button.style.alignItems = 'center';
      button.style.justifyContent = 'center';
      button.style.transition = 'all 0.2s ease';
      button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.15)';
      
      // Augmenter le contraste en mode clair
      const isDarkMode = document.documentElement.classList.contains('dark');
      if (!isDarkMode) {
        button.style.backgroundColor = '#4b5563'; // Gris plus foncé
        button.style.color = '#ffffff'; // Texte blanc
        button.style.border = 'none';
      } else {
        button.style.backgroundColor = '#374151'; // Gris foncé pour le mode sombre
        button.style.border = '1px solid #4b5563';
      }
      
      // Effets au survol
      button.addEventListener('mouseenter', () => {
        button.style.transform = 'translateY(-2px)';
        button.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
        if (!isDarkMode) {
          button.style.backgroundColor = '#3b82f6'; // Bleu au survol
        }
      });
      
      button.addEventListener('mouseleave', () => {
        button.style.transform = 'translateY(0)';
        button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.15)';
        if (!isDarkMode) {
          button.style.backgroundColor = '#4b5563'; // Retour au gris de base
        }
      });
    }
  });
  
  // Ajouter des règles CSS pour l'animation
  if (!document.getElementById('calendar-enhancer-styles')) {
    const style = document.createElement('style');
    style.id = 'calendar-enhancer-styles';
    style.textContent = `
      @keyframes pulse-subtle {
        0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.2); }
        70% { box-shadow: 0 0 0 4px rgba(59, 130, 246, 0); }
        100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }
      }
    `;
    document.head.appendChild(style);
  }
};

// Améliorer l'apparence et l'interaction des événements
function enhanceCalendarEvents() {
  const eventElements = document.querySelectorAll('.fc-event');
  
  eventElements.forEach(eventEl => {
    if (!(eventEl instanceof HTMLElement)) return;    // Améliorer l'apparence générale
    eventEl.classList.add(
      'hover:shadow-lg',
      'transition-all',
      'duration-200',
      'rounded-lg',
      'border-l-4'
    );
    
    // Ajouter un effet de profondeur
    eventEl.style.boxShadow = '0 3px 6px rgba(0,0,0,0.1)';
    eventEl.style.backdropFilter = 'blur(8px)';
    
    // Améliorer l'interaction au survol
    eventEl.style.cursor = 'pointer';
    
    // Arrondir davantage les angles
    eventEl.style.borderRadius = '8px';
    
    // Extraire le statut depuis le backgroundColor et ajouter une classe appropriée
    const style = window.getComputedStyle(eventEl);
    const backgroundColor = style.backgroundColor;
    
    // Appliquer différents styles selon le statut
    if (backgroundColor.includes('76, 175, 80') || backgroundColor.includes('4CAF50')) {
      eventEl.classList.add('event-status-confirmed');
      eventEl.style.borderColor = '#4CAF50';
      eventEl.style.background = 'linear-gradient(to right, rgba(76, 175, 80, 0.2), rgba(76, 175, 80, 0.1))';
      
    } else if (backgroundColor.includes('255, 152, 0') || backgroundColor.includes('FF9800')) {
      eventEl.classList.add('event-status-pending');
      eventEl.style.borderColor = '#FF9800';
      eventEl.style.background = 'linear-gradient(to right, rgba(255, 152, 0, 0.2), rgba(255, 152, 0, 0.1))';
      
    } else if (backgroundColor.includes('244, 67, 54') || backgroundColor.includes('F44336')) {
      eventEl.classList.add('event-status-cancelled');
      eventEl.style.borderColor = '#F44336';
      eventEl.style.background = 'linear-gradient(to right, rgba(244, 67, 54, 0.2), rgba(244, 67, 54, 0.1))';
      
    } else if (backgroundColor.includes('33, 150, 243') || backgroundColor.includes('2196F3')) {
      eventEl.classList.add('event-status-completed');
      eventEl.style.background = 'linear-gradient(to right, rgba(33, 150, 243, 0.2), rgba(33, 150, 243, 0.1))';
      eventEl.style.borderColor = '#2196F3';
    }    // Améliorer la lisibilité du contenu
    const contentEl = eventEl.querySelector('.fc-event-main');
    if (contentEl instanceof HTMLElement) {
      contentEl.style.padding = '0.75rem';
      contentEl.style.lineHeight = '1.3';
      
      // Ajouter des bordures arrondies intérieures
      contentEl.style.borderRadius = '0.5rem';
    }
    
    // Styliser le titre de l'événement
    const titleEl = eventEl.querySelector('.fc-event-title');
    if (titleEl instanceof HTMLElement) {
      titleEl.style.fontWeight = '600';
      titleEl.style.marginBottom = '2px';
    }
    
    // Styliser l'heure de l'événement
    const timeEl = eventEl.querySelector('.fc-event-time');
    if (timeEl instanceof HTMLElement) {
      timeEl.style.fontSize = '0.8rem';
      timeEl.style.opacity = '0.85';
      timeEl.style.fontWeight = '500';
    }

    // Ajouter des effets interactifs
    eventEl.addEventListener('mouseenter', () => {
      eventEl.style.transform = 'scale(1.02) translateY(-2px)';
      eventEl.style.zIndex = '5';
      eventEl.style.boxShadow = '0 8px 16px rgba(0,0,0,0.15)';
    });

    eventEl.addEventListener('mouseleave', () => {
      eventEl.style.transform = 'scale(1) translateY(0)';
      eventEl.style.zIndex = '1';
      eventEl.style.boxShadow = '0 2px 5px rgba(0,0,0,0.08)';
    });
  });
}

// Améliorer l'affichage sur mobile et desktop
function enhanceMobileView() {
  // Styliser la barre d'outils du calendrier
  const headerToolbar = document.querySelector('.fc-header-toolbar');
  if (headerToolbar instanceof HTMLElement) {
    headerToolbar.style.padding = '0.75rem 1rem';
    headerToolbar.style.marginBottom = '1.25rem';
    headerToolbar.style.backgroundColor = 'rgba(239, 246, 255, 0.7)'; // Bleu très pâle un peu plus visible
    headerToolbar.style.borderRadius = '0.75rem';
    headerToolbar.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.05)';
    headerToolbar.style.display = 'flex';
    headerToolbar.style.alignItems = 'center';
    headerToolbar.style.justifyContent = 'space-between';
    
    // Adapter pour le mode sombre
    if (document.documentElement.classList.contains('dark')) {
      headerToolbar.style.backgroundColor = 'rgba(30, 58, 138, 0.2)'; // Bleu foncé transparent
      headerToolbar.style.borderBottom = '1px solid rgba(55, 65, 81, 0.6)';
      headerToolbar.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.2)';
    } else {
      headerToolbar.style.borderBottom = '1px solid rgba(226, 232, 240, 0.9)';
    }
    
    // Améliorer l'espacement entre les groupes de boutons
    const toolbarSections = headerToolbar.querySelectorAll('.fc-toolbar-chunk');
    toolbarSections.forEach((section, index) => {
      if (section instanceof HTMLElement) {
        section.style.display = 'flex';
        section.style.alignItems = 'center';
        section.style.gap = '8px';
        
        // Ajouter des marges spécifiques selon la position
        if (index === 0) {
          // Section gauche (boutons prev/next)
          section.style.justifyContent = 'flex-start';
          section.style.flex = '1';
        } else if (index === 1) {
          // Section centrale (titre)
          section.style.justifyContent = 'center';
          section.style.flex = '2';
        } else if (index === 2) {
          // Section droite (sélecteurs de vue)
          section.style.justifyContent = 'flex-end';
          section.style.flex = '1';
        }
      }
    });
  }
  
  // Styliser les boutons
  // Définir des styles de base pour tous les boutons
  const buttons = document.querySelectorAll('.fc-button');
  buttons.forEach(button => {
    if (button instanceof HTMLElement) {
      button.style.borderRadius = '0.5rem';
      button.style.transition = 'all 0.25s ease';
      button.style.position = 'relative';
      button.style.fontWeight = '500';
      
      // État actif
      if (button.classList.contains('fc-button-active')) {
        button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.15)';
        button.style.transform = 'translateY(-1px)';
      }
    }
  });
  
  // Appliquer des styles spécifiques aux boutons de vue (Month, Week, Day, List)
  const viewButtons = document.querySelectorAll('.fc-dayGridMonth-button, .fc-timeGridWeek-button, .fc-timeGridDay-button, .fc-listWeek-button');
  
  viewButtons.forEach(button => {
    if (button instanceof HTMLElement) {
      const isDarkMode = document.documentElement.classList.contains('dark');
      const isActive = button.classList.contains('fc-button-active');
      
      // Styles de base pour tous les modes
      button.style.padding = '6px 12px';
      button.style.margin = '0 2px';
      button.style.minWidth = '80px';
      
      if (isDarkMode) {
        // Styles pour le mode sombre
        if (isActive) {
          button.style.backgroundColor = '#3b82f6'; // Bleu pour le bouton actif
          button.style.borderColor = '#2563eb';
          button.style.color = '#ffffff';
        } else {
          button.style.backgroundColor = '#374151'; // Gris foncé pour les boutons inactifs
          button.style.borderColor = '#4b5563';
          button.style.color = '#d1d5db';
        }
      } else {
        // Styles pour le mode clair
        if (isActive) {
          button.style.backgroundColor = '#3b82f6'; // Bleu pour le bouton actif
          button.style.borderColor = '#2563eb';
          button.style.color = '#ffffff';
        } else {
          button.style.backgroundColor = '#4b5563'; // Gris pour les boutons inactifs
          button.style.borderColor = '#374151';
          button.style.color = '#f9fafb';
        }
      }
      
      // Ajouter des effets de survol
      button.addEventListener('mouseenter', () => {
        if (!isActive) {
          button.style.transform = 'translateY(-2px)';
          button.style.boxShadow = '0 4px 6px rgba(0,0,0,0.1)';
          
          if (isDarkMode) {
            button.style.backgroundColor = '#4b5563';
            button.style.borderColor = '#6b7280';
          } else {
            button.style.backgroundColor = '#6b7280';
          }
        } else {
          button.style.boxShadow = '0 4px 8px rgba(59, 130, 246, 0.3)';
        }
      });
      
      button.addEventListener('mouseleave', () => {
        if (!isActive) {
          button.style.transform = 'translateY(0)';
          button.style.boxShadow = 'none';
          
          if (isDarkMode) {
            button.style.backgroundColor = '#374151';
            button.style.borderColor = '#4b5563';
          } else {
            button.style.backgroundColor = '#4b5563';
            button.style.borderColor = '#374151';
          }
        } else {
          button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.15)';
          button.style.transform = 'translateY(-1px)';
        }
      });
      
      // Ajouter un effet au clic
      button.addEventListener('click', () => {
        button.style.transform = 'translateY(0)';
        button.style.boxShadow = 'inset 0 1px 3px rgba(0,0,0,0.2)';
        
        setTimeout(() => {
          if (button.classList.contains('fc-button-active')) {
            button.style.backgroundColor = '#3b82f6';
            button.style.borderColor = '#2563eb';
            button.style.color = '#ffffff';
            button.style.transform = 'translateY(-1px)';
            button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.15)';
          }
        }, 200);
      });
    }
  });

  // Mobile spécifique
  if (window.innerWidth < 640) {
    // Simplifier l'affichage sur mobile
    if (headerToolbar instanceof HTMLElement) {
      headerToolbar.classList.add('flex', 'flex-col', 'gap-2');
    }
    
    // Réduire la taille des textes
    const eventTitles = document.querySelectorAll('.fc-event-title');
    eventTitles.forEach(el => {
      if (el instanceof HTMLElement) {
        el.style.fontSize = '0.75rem';
      }
    });  } else {
    // Styles pour desktop
    const titleElement = document.querySelector('.fc-toolbar-title');
    if (titleElement instanceof HTMLElement) {
      titleElement.style.fontSize = '1.2rem';
      titleElement.style.fontWeight = '600';
      titleElement.style.padding = '0.25rem 0.75rem';
      titleElement.style.position = 'relative';
      titleElement.style.borderRadius = '0.5rem';
      
      // Adapter pour le mode sombre
      if (document.documentElement.classList.contains('dark')) {
        titleElement.style.color = '#60a5fa';
        titleElement.style.background = 'rgba(30, 58, 138, 0.3)';
      } else {
        titleElement.style.color = '#3b82f6';
        titleElement.style.background = 'rgba(239, 246, 255, 0.6)';
      }
    }
  }
}

// Observer les changements dans le calendrier pour appliquer les améliorations aux nouveaux éléments
function observeCalendarChanges() {
  const calendarEl = document.querySelector('.fc');
  if (!calendarEl) return;
  
  const observer = new MutationObserver((mutations) => {
    mutations.forEach(mutation => {
      if (mutation.type === 'childList' || mutation.type === 'attributes') {
        enhanceCalendarEvents();
        enhanceMobileView();
      }
    });
  });
  
  observer.observe(calendarEl, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['class']
  });
}

// Fonction pour ajouter une indication de l'heure actuelle plus visible
export const enhanceCurrentTimeIndicator = () => {
  // Améliorer l'indicateur de ligne de temps actuel
  const timeIndicator = document.querySelector('.fc-timegrid-now-indicator-line');
  if (timeIndicator instanceof HTMLElement) {
    timeIndicator.style.borderColor = '#3b82f6';
    timeIndicator.style.borderWidth = '2px';
    timeIndicator.style.zIndex = '5';
    timeIndicator.style.boxShadow = '0 0 12px rgba(59, 130, 246, 0.6)';
    
    // Créer un effet de ligne dégradée pour plus de visibilité
    timeIndicator.style.background = 'linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.8) 25%, rgba(59, 130, 246, 0.8) 75%, transparent)';
    timeIndicator.style.height = '3px';
    
    // Ajouter un effet de pulsation amélioré
    timeIndicator.style.animation = 'pulse-time-indicator 3s infinite';
    
    // Ajouter une règle CSS pour l'animation améliorée
    if (!document.getElementById('time-indicator-styles')) {
      const style = document.createElement('style');
      style.id = 'time-indicator-styles';
      style.textContent = `
        @keyframes pulse-time-indicator {
          0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.6); opacity: 0.8; }
          50% { box-shadow: 0 0 16px 2px rgba(59, 130, 246, 0.4); opacity: 1; }
          100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.6); opacity: 0.8; }
        }
      `;
      document.head.appendChild(style);
    }
  }
  
  // Améliorer le marqueur de l'heure actuelle (le point)
  const timeLabel = document.querySelector('.fc-timegrid-now-indicator-arrow');
  if (timeLabel instanceof HTMLElement) {
    timeLabel.style.borderColor = '#3b82f6';
    timeLabel.style.backgroundColor = '#3b82f6';
    timeLabel.style.width = '12px';
    timeLabel.style.height = '12px';
    timeLabel.style.borderRadius = '50%';
    timeLabel.style.boxShadow = '0 0 8px rgba(59, 130, 246, 0.6), 0 0 0 2px rgba(255, 255, 255, 0.6)';
    timeLabel.style.zIndex = '6';
    timeLabel.style.animation = 'pulse-dot 2s infinite';
    
    // Ajouter un tooltip pour afficher l'heure actuelle
    timeLabel.setAttribute('title', `Heure actuelle: ${new Date().toLocaleTimeString()}`);
    
    // Ajouter une animation pour le point
    if (!document.getElementById('time-dot-styles')) {
      const dotStyle = document.createElement('style');
      dotStyle.id = 'time-dot-styles';
      dotStyle.textContent = `
        @keyframes pulse-dot {
          0% { transform: scale(0.95); box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); }
          70% { transform: scale(1.05); box-shadow: 0 0 0 8px rgba(59, 130, 246, 0); }
          100% { transform: scale(0.95); box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }
        }
      `;
      document.head.appendChild(dotStyle);
    }
  }
  
  // Améliorer l'apparence de la colonne correspondant au jour actuel
  const todayCol = document.querySelector('.fc-day-today');
  if (todayCol instanceof HTMLElement) {
    todayCol.style.backgroundColor = 'rgba(59, 130, 246, 0.05)';
    todayCol.style.borderTop = '2px solid rgba(59, 130, 246, 0.4)';
    todayCol.style.position = 'relative';
    
    // Ajouter un subtil dégradé vertical pour indiquer le jour actuel
    const overlay = document.createElement('div');
    overlay.style.position = 'absolute';
    overlay.style.inset = '0';
    overlay.style.background = 'linear-gradient(to bottom, rgba(59, 130, 246, 0.08) 0%, rgba(59, 130, 246, 0.02) 50%, rgba(59, 130, 246, 0.08) 100%)';
    overlay.style.pointerEvents = 'none';
    
    todayCol.appendChild(overlay);
  }
  
  // Mettre à jour l'indicateur d'heure toutes les minutes pour garder l'heure exacte
  setTimeout(() => {
    enhanceCurrentTimeIndicator();
  }, 60000);
};
