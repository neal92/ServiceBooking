import React, { useState, useEffect } from 'react';
import { PlusCircle, Search } from 'lucide-react';
import ServiceCard from '../components/services/ServiceCard';
import NewServiceModal from '../components/services/NewServiceModal';
import { Service, Category } from '../types';
import { serviceService, categoryService } from '../services/api';

const Services = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategoryId, setSelectedCategoryId] = useState<number | null>(null);
  const [services, setServices] = useState<Service[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [editingService, setEditingService] = useState<Service | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      // Fetch services and categories in parallel
      const [servicesData, categoriesData] = await Promise.all([
        serviceService.getAll(),
        categoryService.getAll()
      ]);
      
      setServices(servicesData);
      setCategories(categoriesData);
      setLoading(false);
      setError('');
    } catch (err) {
      console.error("Error fetching data:", err);
      setError('Failed to load services or categories');
      setLoading(false);
    }
  };

  const handleDeleteService = async (id: number) => {
    if (window.confirm('Êtes-vous sûr de vouloir supprimer cette prestation ?')) {
      try {
        await serviceService.delete(id);
        // Refresh services after deletion
        fetchData();
      } catch (err) {
        console.error("Error deleting service:", err);
        setError('Failed to delete service');
      }
    }
  };

  const handleEditService = (service: Service) => {
    setEditingService(service);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setEditingService(null);
    setIsModalOpen(false);
    // Refresh services after modal close
    fetchData();
  };

  const filteredServices = services.filter(
    service => 
      (selectedCategoryId ? service.categoryId === selectedCategoryId : true) &&
      (searchTerm ? 
        service.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
        (service.description && service.description.toLowerCase().includes(searchTerm.toLowerCase()))
        : true)
  );

  return (
    <div>
      <div className="md:flex md:items-center md:justify-between mb-6">
        <div className="flex-1 min-w-0">
          <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
            Mes Prestations
          </h2>
        </div>
        <div className="mt-4 flex md:mt-0 md:ml-4">
          <button
            type="button"
            onClick={() => setIsModalOpen(true)}
            className="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <PlusCircle className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
            Nouvelle prestation
          </button>
        </div>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
          {error}
        </div>
      )}

      {/* Search and Filters */}
      <div className="mb-6">
        <div className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4">
          <div className="flex-1">
            <label htmlFor="search" className="sr-only">
              Rechercher
            </label>
            <div className="relative rounded-md shadow-sm">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" aria-hidden="true" />
              </div>
              <input
                type="text"
                name="search"
                id="search"
                className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
                placeholder="Rechercher une prestation..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div>
            <select
              id="category"
              name="category"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={selectedCategoryId ? selectedCategoryId.toString() : ''}
              onChange={(e) => setSelectedCategoryId(e.target.value ? parseInt(e.target.value, 10) : null)}
            >
              <option value="">Toutes les catégories</option>
              {categories.map((category) => (
                <option key={category.id} value={category.id}>{category.name}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Loading state */}
      {loading ? (
        <div className="text-center py-10">
          <p className="text-gray-500">Chargement des prestations...</p>
        </div>
      ) : (
        /* Services Grid */
        <>
          {filteredServices.length === 0 ? (
            <div className="text-center py-10">
              <p className="text-gray-500">Aucune prestation trouvée</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {filteredServices.map((service) => (
                <ServiceCard 
                  key={service.id} 
                  service={service} 
                  onEdit={() => handleEditService(service)} 
                  onDelete={() => handleDeleteService(service.id)} 
                />
              ))}
            </div>
          )}
        </>
      )}

      <NewServiceModal 
        isOpen={isModalOpen} 
        onClose={handleCloseModal} 
        categories={categories}
        service={editingService}
      />
    </div>
  );
};

export default Services;
