import React, { useState, useEffect } from 'react';
import { PlusCircle, Filter, Calendar as CalendarIcon } from 'lucide-react';
import AppointmentList from '../components/appointments/AppointmentList';
import NewAppointmentModal from '../components/appointments/NewAppointmentModal';
import { Appointment, Service } from '../types';
import { appointmentService, serviceService } from '../services/api';

type AppointmentStatus = 'all' | 'upcoming' | 'ongoing' | 'past';

const Appointments = () => {
  const [statusFilter, setStatusFilter] = useState<AppointmentStatus>('all');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [appointmentsData, servicesData] = await Promise.all([
        appointmentService.getAll(),
        serviceService.getAll()
      ]);
      setAppointments(appointmentsData);
      setServices(servicesData);
      setLoading(false);
    } catch (err) {
      console.error("Error fetching data:", err);
      setError('Failed to load appointments or services');
      setLoading(false);
    }
  };

  const handleDeleteAppointment = async (id: number) => {
    if (window.confirm('Êtes-vous sûr de vouloir supprimer ce rendez-vous ?')) {
      try {
        await appointmentService.delete(id);
        fetchData();
      } catch (err) {
        console.error("Error deleting appointment:", err);
        setError('Failed to delete appointment');
      }
    }
  };

  const handleStatusChange = async (id: number, status: string) => {
    try {
      await appointmentService.updateStatus(id, status);
      fetchData();
    } catch (err) {
      console.error("Error updating appointment status:", err);
      setError('Failed to update appointment status');
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    fetchData();
  };

  const filteredAppointments = appointments.filter(appointment => {
    if (!appointment.date) return false;
    
    const appointmentDate = new Date(appointment.date);
    const today = new Date();
    
    switch (statusFilter) {
      case 'upcoming':
        return appointmentDate > today;
      case 'ongoing':
        return appointmentDate.toDateString() === today.toDateString();
      case 'past':
        return appointmentDate < today;
      default:
        return true;
    }
  });

  return (
    <div>
      <div className="md:flex md:items-center md:justify-between mb-6">
        <div className="flex-1 min-w-0">
          <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
            Rendez-vous
          </h2>
        </div>
        <div className="mt-4 flex md:mt-0 md:ml-4">
          <button
            type="button"
            onClick={() => setIsModalOpen(true)}
            className="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <PlusCircle className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
            Nouveau rendez-vous
          </button>
        </div>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
          {error}
        </div>
      )}

      {/* Filters */}
      <div className="bg-white p-4 shadow rounded-lg mb-6">
        <div className="flex items-center">
          <Filter className="h-5 w-5 text-gray-400 mr-2" />
          <span className="text-sm font-medium text-gray-500 mr-4">Filtrer par:</span>
          <div className="flex space-x-2">
            <button
              onClick={() => setStatusFilter('all')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md ${
                statusFilter === 'all'
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-500 hover:bg-gray-100'
              }`}
            >
              Tous
            </button>
            <button
              onClick={() => setStatusFilter('upcoming')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md ${
                statusFilter === 'upcoming'
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-500 hover:bg-gray-100'
              }`}
            >
              À venir
            </button>
            <button
              onClick={() => setStatusFilter('ongoing')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md ${
                statusFilter === 'ongoing'
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-500 hover:bg-gray-100'
              }`}
            >
              Aujourd'hui
            </button>
            <button
              onClick={() => setStatusFilter('past')}
              className={`px-3 py-1.5 text-sm font-medium rounded-md ${
                statusFilter === 'past'
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-500 hover:bg-gray-100'
              }`}
            >
              Passés
            </button>
          </div>
        </div>
      </div>

      {/* Loading state */}
      {loading ? (
        <div className="text-center py-10">
          <p className="text-gray-500">Chargement des rendez-vous...</p>
        </div>
      ) : (
        // Appointment List
        <>
          {filteredAppointments.length === 0 ? (
            <div className="bg-white shadow rounded-lg p-6 text-center">
              <CalendarIcon className="h-12 w-12 text-gray-400 mx-auto" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">Aucun rendez-vous</h3>
              <p className="mt-1 text-sm text-gray-500">
                Commencez par créer un nouveau rendez-vous.
              </p>
              <div className="mt-6">
                <button
                  type="button"
                  onClick={() => setIsModalOpen(true)}
                  className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <PlusCircle className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
                  Nouveau rendez-vous
                </button>
              </div>
            </div>
          ) : (
            <AppointmentList 
              appointments={filteredAppointments} 
              onDelete={handleDeleteAppointment} 
              onStatusChange={handleStatusChange}
            />
          )}
        </>
      )}

      <NewAppointmentModal 
        isOpen={isModalOpen} 
        onClose={handleCloseModal} 
        services={services}
      />
    </div>
  );
};

export default Appointments;
